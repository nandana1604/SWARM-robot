#include <WiFi.h>
#include <esp_now.h>
#include <ArduinoJson.h>

// LED for status
#define STATUS_LED 4

// DC Motor Pins (L298N)
#define MOTOR_A1 17  // IN1
#define MOTOR_A2 18  // IN2
#define ENA      5   // PWM control pin

// Global state
String lastMessage = "";

// Broadcast Address
uint8_t broadcastAddress[] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};

// ========== Motor Control ========== //
void setupMotors() {
  pinMode(MOTOR_A1, OUTPUT);
  pinMode(MOTOR_A2, OUTPUT);
  pinMode(ENA, OUTPUT);
  analogWrite(ENA, 200);  // Set initial speed (0-255)
}

void moveForward() {
  digitalWrite(MOTOR_A1, HIGH);
  digitalWrite(MOTOR_A2, LOW);
}

void moveBackward() {
  digitalWrite(MOTOR_A1, LOW);
  digitalWrite(MOTOR_A2, HIGH);
}

void stopMotors() {
  digitalWrite(MOTOR_A1, LOW);
  digitalWrite(MOTOR_A2, LOW);
}

void turnLeft() {
  moveForward();
  delay(300);
  stopMotors();
}

void turnRight() {
  moveForward();
  delay(300);
  stopMotors();
}

// ========== ESP-NOW ========= //
void formatMacAddress(const uint8_t *macAddr, char *buffer, int maxLength) {
  snprintf(buffer, maxLength, "%02x:%02x:%02x:%02x:%02x:%02x",
           macAddr[0], macAddr[1], macAddr[2], macAddr[3], macAddr[4], macAddr[5]);
}

void receiveCallback(const esp_now_recv_info_t *recv_info, const uint8_t *data, int dataLen) {
  char buffer[ESP_NOW_MAX_DATA_LEN + 1];
  int msgLen = min(ESP_NOW_MAX_DATA_LEN, dataLen);
  strncpy(buffer, (const char *)data, msgLen);
  buffer[msgLen] = 0; // Null-terminate

  char macStr[18];
  formatMacAddress(recv_info->src_addr, macStr, sizeof(macStr));
  Serial.printf("Received from %s: %s\n", macStr, buffer);

  lastMessage = String(buffer);

  // LED control
  if (lastMessage.equals("ON")) {
    digitalWrite(STATUS_LED, HIGH);
  } else if (lastMessage.equals("OFF")) {
    digitalWrite(STATUS_LED, LOW);
  }

  // Motor commands
  if (lastMessage.equalsIgnoreCase("FORWARD")) {
    moveForward();
  } else if (lastMessage.equalsIgnoreCase("LEFT")) {
    turnLeft();
  } else if (lastMessage.equalsIgnoreCase("RIGHT")) {
    turnRight();
  } else if (lastMessage.equalsIgnoreCase("STOP")) {
    stopMotors();
  }
}

void sentCallback(const uint8_t *macAddr, esp_now_send_status_t status) {
  char macStr[18];
  formatMacAddress(macAddr, macStr, sizeof(macStr));
  Serial.printf("Sent to %s: %s\n", macStr, status == ESP_NOW_SEND_SUCCESS ? "Success" : "Fail");
}

void broadcast(const String &message) {
  esp_err_t result = esp_now_send(broadcastAddress, (const uint8_t *)message.c_str(), message.length());

  if (result == ESP_OK) {
    Serial.printf("Broadcast Sent: %s\n", message.c_str());
  } else {
    Serial.printf("Broadcast Failed! Error Code: %d\n", result);
  }
}

// ========== Setup & Loop ========= //
void setup() {
  Serial.begin(115200);
  WiFi.mode(WIFI_STA);
  WiFi.disconnect();
  Serial.println("ESP-NOW + Motor + LED Control");

  // Setup motors and LED
  setupMotors();
  pinMode(STATUS_LED, OUTPUT);
  digitalWrite(STATUS_LED, LOW);

  // Init ESP-NOW
  if (esp_now_init() == ESP_OK) {
    Serial.println("ESP-NOW Init Success");
    esp_now_register_recv_cb(receiveCallback);
    esp_now_register_send_cb(sentCallback);

    esp_now_peer_info_t peerInfo = {};
    memcpy(peerInfo.peer_addr, broadcastAddress, 6);
    peerInfo.channel = 0;
    peerInfo.encrypt = false;

    if (esp_now_add_peer(&peerInfo) == ESP_OK) {
      Serial.println("Broadcast Peer Added");
    } else {
      Serial.println("Failed to Add Broadcast Peer");
    }
  } else {
    Serial.println("ESP-NOW Init Failed");
    delay(3000);
    ESP.restart();
  }
}

void loop() {
  // Read user input from Serial and broadcast
  if (Serial.available()) {
    String msg = Serial.readStringUntil('\n');
    msg.trim();
    if (msg.length() > 0) {
      broadcast(msg);
    }
  }

  // Optional: Handle state-based loop actions
}
