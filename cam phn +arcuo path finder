import cv2
import numpy as np
import math

# ArUco setup
aruco_dict = cv2.aruco.getPredefinedDictionary(cv2.aruco.DICT_4X4_50)
parameters = cv2.aruco.DetectorParameters()

# The IP Webcam URL for your phone camera feed
URL = "http://172.20.10.3:8080/video"  # Replace with your phone's IP address

# Start video capture from phone camera
cap = cv2.VideoCapture(URL)

# Bot positions
bot1_pos = np.array([100, 100], dtype=np.float32)
bot2_pos = np.array([500, 100], dtype=np.float32)
bot_speed = 2.5

def move_towards(current_pos, target_pos, speed, avoid_center, avoid_radius):
    direction = target_pos - current_pos
    distance = np.linalg.norm(direction)

    if distance < speed:
        return current_pos

    step = (direction / distance) * speed
    next_pos = current_pos + step

    # Check for overlap with ArUco
    if np.linalg.norm(next_pos - avoid_center) < avoid_radius:
        # Calculate a direction perpendicular to avoid the marker
        perp = np.array([-direction[1], direction[0]])  # rotate 90Â°
        perp = perp / np.linalg.norm(perp)
        next_pos = current_pos + perp * speed  # sidestep instead

    return next_pos

def get_angle(corners):
    p0, p1 = corners[0], corners[1]
    dx, dy = p1[0] - p0[0], p1[1] - p0[1]
    angle = math.degrees(math.atan2(dy, dx))
    return (angle + 360) % 360

while True:
    ret, frame = cap.read()
    if not ret:
        print("Error: Cannot grab frame")
        break

    detector = cv2.aruco.ArucoDetector(aruco_dict, parameters)
    corners, ids, _ = detector.detectMarkers(frame)

    if ids is not None:
        for i in range(len(ids)):
            marker_corners = corners[i][0]
            cx = int(np.mean(marker_corners[:, 0]))
            cy = int(np.mean(marker_corners[:, 1]))
            angle = get_angle(marker_corners)

            marker_center = np.array([cx, cy])
            safe_radius = 60  # radius around ArUco marker to avoid

            # Offset targets
            offset = 100
            angle_rad = math.radians(angle)
            dx, dy = math.cos(angle_rad), math.sin(angle_rad)

            bot1_target = marker_center + offset * np.array([dx, dy])
            bot2_target = marker_center - offset * np.array([dx, dy])

            bot1_pos = move_towards(bot1_pos, bot1_target, bot_speed, marker_center, safe_radius)
            bot2_pos = move_towards(bot2_pos, bot2_target, bot_speed, marker_center, safe_radius)

            # Draw safe zone
            cv2.circle(frame, (cx, cy), safe_radius, (0, 0, 255), 1)

            # Draw marker
            cv2.polylines(frame, [np.int32(marker_corners)], True, (0, 255, 0), 2)
            cv2.putText(frame, f"ID:{ids[i][0]} Pos:({cx},{cy}) Angle:{angle:.2f}",
                        (cx - 70, cy - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 255), 2)

    # Draw bots
    cv2.circle(frame, tuple(np.int32(bot1_pos)), 10, (255, 0, 0), -1)
    cv2.circle(frame, tuple(np.int32(bot2_pos)), 10, (0, 255, 255), -1)
    cv2.putText(frame, f"Bot 1 Pos:{tuple(np.int32(bot1_pos))}", (10, 20),
                cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 0, 0), 1)
    cv2.putText(frame, f"Bot 2 Pos:{tuple(np.int32(bot2_pos))}", (10, 40),
                cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 255), 1)

    cv2.imshow("2-Bot ArUco Simulation", frame)

    # Press 'Esc' to exit
    if cv2.waitKey(1) == 27:
        break

cap.release()
cv2.destroyAllWindows()
