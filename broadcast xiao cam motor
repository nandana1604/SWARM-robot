#include <WiFi.h>
#include <esp_now.h>
#include "esp_camera.h"

// === CAMERA CONFIG ===
#define PWDN_GPIO_NUM     -1
#define RESET_GPIO_NUM    -1
#define XCLK_GPIO_NUM     10
#define SIOD_GPIO_NUM     17
#define SIOC_GPIO_NUM     18

#define Y9_GPIO_NUM       6
#define Y8_GPIO_NUM       5
#define Y7_GPIO_NUM       4
#define Y6_GPIO_NUM       1
#define Y5_GPIO_NUM       0
#define Y4_GPIO_NUM       16
#define Y3_GPIO_NUM       15
#define Y2_GPIO_NUM       7
#define VSYNC_GPIO_NUM    8
#define HREF_GPIO_NUM     9
#define PCLK_GPIO_NUM     11

// === MOTOR PINS ===
#define MOTOR_LEFT_DIR 2
#define MOTOR_RIGHT_DIR 3
#define MOTOR_SPEED    1  // You can change this if using PWM

// === LED FOR STATUS ===
#define STATUS_LED LED_BUILTIN

// === GLOBAL STATE ===
String lastMessage = "";
uint8_t broadcastAddress[] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};

// === Function to format MAC address ===
void formatMacAddress(const uint8_t *macAddr, char *buffer, int maxLength) {
  snprintf(buffer, maxLength, "%02x:%02x:%02x:%02x:%02x:%02x", 
           macAddr[0], macAddr[1], macAddr[2], macAddr[3], macAddr[4], macAddr[5]);
}

// === CALLBACK FOR RECEIVING MESSAGES ===
void receiveCallback(const esp_now_recv_info_t *recv_info, const uint8_t *data, int dataLen) {
  char buffer[ESP_NOW_MAX_DATA_LEN + 1];
  int msgLen = min(ESP_NOW_MAX_DATA_LEN, dataLen);
  strncpy(buffer, (const char *)data, msgLen);
  buffer[msgLen] = 0;

  char macStr[18];
  formatMacAddress(recv_info->src_addr, macStr, sizeof(macStr));
  Serial.printf("Received from %s: %s\n", macStr, buffer);

  lastMessage = String(buffer);

  // Control LED
  digitalWrite(STATUS_LED, lastMessage.equals("ON") ? LOW : HIGH);
}

// === CALLBACK FOR SENT MESSAGE ===
void sentCallback(const uint8_t *macAddr, esp_now_send_status_t status) {
  char macStr[18];
  formatMacAddress(macAddr, macStr, sizeof(macStr));
  Serial.printf("Last Packet Sent to: %s - Status: %s\n", macStr, status == ESP_NOW_SEND_SUCCESS ? "Success" : "Fail");
}

// === BROADCAST FUNCTION ===
void broadcast(const String &message) {
  esp_err_t result = esp_now_send(broadcastAddress, (const uint8_t *)message.c_str(), message.length());
  Serial.printf("Broadcast %s: %s\n", result == ESP_OK ? "Success" : "Failed", message.c_str());
}

// === CAMERA INITIALIZATION ===
bool initCamera() {
  camera_config_t config;
  config.ledc_channel = LEDC_CHANNEL_0;
  config.ledc_timer = LEDC_TIMER_0;
  config.pin_d0 = Y2_GPIO_NUM;
  config.pin_d1 = Y3_GPIO_NUM;
  config.pin_d2 = Y4_GPIO_NUM;
  config.pin_d3 = Y5_GPIO_NUM;
  config.pin_d4 = Y6_GPIO_NUM;
  config.pin_d5 = Y7_GPIO_NUM;
  config.pin_d6 = Y8_GPIO_NUM;
  config.pin_d7 = Y9_GPIO_NUM;
  config.pin_xclk = XCLK_GPIO_NUM;
  config.pin_pclk = PCLK_GPIO_NUM;
  config.pin_vsync = VSYNC_GPIO_NUM;
  config.pin_href = HREF_GPIO_NUM;
  config.pin_sscb_sda = SIOD_GPIO_NUM;
  config.pin_sscb_scl = SIOC_GPIO_NUM;
  config.pin_pwdn = PWDN_GPIO_NUM;
  config.pin_reset = RESET_GPIO_NUM;
  config.xclk_freq_hz = 20000000;
  config.pixel_format = PIXFORMAT_GRAYSCALE;
  config.frame_size = FRAMESIZE_QQVGA;
  config.fb_count = 1;

  esp_err_t err = esp_camera_init(&config);
  if (err != ESP_OK) {
    Serial.printf("Camera init failed with error 0x%x", err);
    return false;
  }
  return true;
}

// === TRACKING AND MOVEMENT ===
void processFrame() {
  camera_fb_t *fb = esp_camera_fb_get();
  if (!fb) {
    Serial.println("Failed to capture frame");
    return;
  }

  int width = fb->width;
  int height = fb->height;
  int midX = width / 2;
  int blackThreshold = 100;
  int sumX = 0, count = 0;

  for (int y = 0; y < height; y++) {
    for (int x = 0; x < width; x++) {
      uint8_t pixel = fb->buf[y * width + x];
      if (pixel < blackThreshold) {
        sumX += x;
        count++;
      }
    }
  }

  esp_camera_fb_return(fb);

  if (count > 10) {
    int avgX = sumX / count;
    int error = avgX - midX;

    if (abs(error) < 10) {
      moveForward();
      broadcast("FORWARD");
    } else if (error > 0) {
      turnRight();
      broadcast("RIGHT");
    } else {
      turnLeft();
      broadcast("LEFT");
    }
  } else {
    stopMotors();
    broadcast("NO_TRACK");
  }
}

// === MOTOR MOVEMENT FUNCTIONS ===
void moveForward() {
  digitalWrite(MOTOR_LEFT_DIR, HIGH);
  digitalWrite(MOTOR_RIGHT_DIR, HIGH);
}

void turnLeft() {
  digitalWrite(MOTOR_LEFT_DIR, LOW);
  digitalWrite(MOTOR_RIGHT_DIR, HIGH);
}

void turnRight() {
  digitalWrite(MOTOR_LEFT_DIR, HIGH);
  digitalWrite(MOTOR_RIGHT_DIR, LOW);
}

void stopMotors() {
  digitalWrite(MOTOR_LEFT_DIR, LOW);
  digitalWrite(MOTOR_RIGHT_DIR, LOW);
}

// === SETUP ===
void setup() {
  Serial.begin(115200);
  pinMode(STATUS_LED, OUTPUT);
  pinMode(MOTOR_LEFT_DIR, OUTPUT);
  pinMode(MOTOR_RIGHT_DIR, OUTPUT);

  digitalWrite(STATUS_LED, LOW);
  WiFi.mode(WIFI_STA);
  WiFi.disconnect();

  if (!initCamera()) {
    Serial.println("Camera not working");
    while (1);
  }

  if (esp_now_init() != ESP_OK) {
    Serial.println("ESP-NOW Init Failed");
    delay(3000);
    ESP.restart();
  }

  esp_now_register_recv_cb(receiveCallback);
  esp_now_register_send_cb(sentCallback);

  esp_now_peer_info_t peerInfo = {};
  memcpy(peerInfo.peer_addr, broadcastAddress, 6);
  peerInfo.channel = 0;
  peerInfo.encrypt = false;
  if (esp_now_add_peer(&peerInfo) != ESP_OK) {
    Serial.println("Failed to Add Broadcast Peer");
  }
}

// === LOOP ===
void loop() {
  if (Serial.available()) {
    lastMessage = Serial.readStringUntil('\n');
    lastMessage.trim();
    if (lastMessage.length() > 0) broadcast(lastMessage);
  }

  // Run tracking every loop
  processFrame();
  delay(100);
}
